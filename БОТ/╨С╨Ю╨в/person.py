import sqlite3
from aiogram import Router, F, Bot,types
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, 
    CallbackQuery,InputMediaPhoto
)
from aiogram.fsm.context import FSMContext
import logging
from status import ConfigState
from keyboards import get_main_menu,get_inline_menu,get_inlines_menu,get_inliness_menu
SUPPORT_CHAT_ID = 2087763654
person_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


#########################---–ø—Ä–æ—Ñ–∏–ª—å---########################################

def get_user_data(user_id: int):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT username, district, gender, age FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if row is None:
        username = "–ë–µ–∑ –∏–º–µ–Ω–∏"
        district = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        gender = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        age = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        username, district, gender, age = row
        username = username if username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        district = district if district else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        gender = gender if gender else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        age = str(age) if age else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    return username, district, gender, age

def update_user_data(user_id: int, field: str, value):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (value, user_id))
    conn.commit()
    conn.close()

@person_router.message(F.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    await send_profile_message(message)

async def send_profile_message(message: Message):
    user_id = message.from_user.id
    username, district, gender, age = get_user_data(user_id)
    caption = (
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
        f"ID: {user_id}\n"
        f"–†–∞–π–æ–Ω: {district}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}"
    )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="configure")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    photo = FSInputFile("images/pup.jpg")
    await message.answer_photo(photo=photo, caption=caption, reply_markup=inline_kb)

def config_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω", callback_data="config_district_menu")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª", callback_data="config_gender_menu")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="config_age_input")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ])

@person_router.callback_query(F.data == "configure")
async def configure_profile(callback_query: CallbackQuery):
    await show_config_menu(callback_query)

async def show_config_menu(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    username, district, gender, age = get_user_data(user_id)
    caption = (
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
        f"ID: {user_id}\n"
        f"–†–∞–π–æ–Ω: {district}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?"
    )
    await callback_query.message.edit_caption(
        caption=caption,
        reply_markup=config_menu()
    )
    await callback_query.answer()

def district_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data="set_district:–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")],
        [InlineKeyboardButton(text="–°–µ–≤–µ—Ä–Ω—ã–π", callback_data="set_district:–°–µ–≤–µ—Ä–Ω—ã–π")],
        [InlineKeyboardButton(text="–Æ–∂–Ω—ã–π", callback_data="set_district:–Æ–∂–Ω—ã–π")],
        [InlineKeyboardButton(text="–í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="set_district:–í–æ—Å—Ç–æ—á–Ω—ã–π")],
        [InlineKeyboardButton(text="–ó–∞–ø–∞–¥–Ω—ã–π", callback_data="set_district:–ó–∞–ø–∞–¥–Ω—ã–π")],
        [InlineKeyboardButton(text="–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="set_district:–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π")],
        [InlineKeyboardButton(text="–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="set_district:–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π")],
        [InlineKeyboardButton(text="–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π", callback_data="set_district:–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_config")]
    ])

@person_router.callback_query(F.data == "config_district_menu")
async def config_district_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=district_menu()
    )
    await callback_query.answer()

def gender_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="set_gender:–ú—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="set_gender:–ñ–µ–Ω—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_config")]
    ])

@person_router.callback_query(F.data == "config_gender_menu")
async def config_gender_menu(callback_query: CallbackQuery):
    await callback_query.message.edit_caption(
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        reply_markup=gender_menu()
    )
    await callback_query.answer()

@person_router.callback_query(F.data == "config_age_input")
async def config_age_input(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(ConfigState.waiting_for_age)
    await state.update_data(edit_message_id=callback_query.message.message_id, chat_id=callback_query.message.chat.id)

    back_menu = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_config_from_age")]
        ]
    )

    await callback_query.message.edit_caption(
        caption="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º, –Ω–µ –±–æ–ª—å—à–µ 99):",
        reply_markup=back_menu
    )
    await callback_query.answer()

@person_router.message(ConfigState.waiting_for_age, F.text)
async def set_age_input(message: Message, state: FSMContext, bot: Bot):
    age_input = message.text.strip()
    if not age_input.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    age = int(age_input)
    if age > 99:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 99. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        return

    user_id = message.from_user.id
    update_user_data(user_id, "age", age)

    data = await state.get_data()
    edit_message_id = data["edit_message_id"]
    chat_id = data["chat_id"]
    await state.clear()

    username, district, gender, age = get_user_data(user_id)
    caption = (
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
        f"ID: {user_id}\n"
        f"–†–∞–π–æ–Ω: {district}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?"
    )

    await bot.edit_message_caption(
        chat_id=chat_id,
        message_id=edit_message_id,
        caption=caption,
        reply_markup=config_menu()
    )

@person_router.callback_query(F.data == "back_to_config_from_age")
async def back_to_config_from_age(callback_query: CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –ù–∞–∑–∞–¥ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–æ–∑—Ä–∞—Å—Ç–∞, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await show_config_menu(callback_query)
    await callback_query.answer()

@person_router.callback_query(F.data.startswith("set_district:"))
async def set_district(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    _, district = callback_query.data.split(":")
    update_user_data(user_id, "district", district)
    await callback_query.answer("–†–∞–π–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await show_config_menu(callback_query)

@person_router.callback_query(F.data.startswith("set_gender:"))
async def set_gender(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    _, gender = callback_query.data.split(":")
    update_user_data(user_id, "gender", gender)
    await callback_query.answer("–ü–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await show_config_menu(callback_query)

@person_router.callback_query(F.data == "back_to_config")
async def back_to_config(callback_query: CallbackQuery):
    await show_config_menu(callback_query)

@person_router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    username, district, gender, age = get_user_data(user_id)
    caption = (
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
        f"ID: {user_id}\n"
        f"–†–∞–π–æ–Ω: {district}\n"
        f"–ü–æ–ª: {gender}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age}"
    )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="configure")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback_query.message.edit_caption(caption=caption, reply_markup=inline_kb)
    await callback_query.answer()

@person_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback_query: CallbackQuery):
    await callback_query.message.delete(caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=None)
    photo = FSInputFile("images/pup2.jpg")
    await callback_query.message.answer_photo(photo=photo, reply_markup=get_main_menu())

    await callback_query.answer()

#########################---–ø—Ä–æ—Ñ–∏–ª—å---########################################




##################################################################


@person_router.message(F.text == "üëâ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continu (message: Message):
    photo = FSInputFile("images/pup.jpg")
    caption = (
    "–ö—É–ª—å—Ç—É—Ä–∞ üñºÔ∏è: –£–∑–Ω–∞–π—Ç–µ –æ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –≤—ã—Å—Ç–∞–≤–∫–∞—Ö –≤ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É.\n\n"
    "–ï–¥–∞ üç∞: –û—Ç–∫—Ä–æ–π—Ç–µ –ª—É—á—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ –≥–æ—Ä–æ–¥–∞.\n\n"
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üéâ: –ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –¥–æ—Å—É–≥–∞.")
    await message.answer_photo(photo=photo, caption=caption, reply_markup=get_inline_menu())


@person_router.callback_query(F.data == "culture")
async def handle_culture(callback_query: CallbackQuery):
    caption = "–ú—É–∑–µ–∏ üñºÔ∏è \n\
    –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –º—É–∑–µ–µ–≤ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É! –£–∑–Ω–∞–π—Ç–µ –æ —Ç–µ–∫—É—â–∏—Ö –≤—ã—Å—Ç–∞–≤–∫–∞—Ö, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–æ–≤–∏—â–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–æ–ª–Ω—è—é—Ç –Ω–∞—à –≥–æ—Ä–æ–¥ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. üèõÔ∏è‚ú®\n\
              –ü–∞–º—è—Ç–Ω–∏–∫–∏ üóø\n \
   –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É! –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –∑–Ω–∞–∫–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö –≥–æ—Ä–æ–¥–∞ –∏ –∏—Ö —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –†–æ—Å—Ç–æ–≤ –æ—Å–æ–±–µ–Ω–Ω—ã–º. üìù‚≠ê "
    await callback_query.message.edit_caption(
        caption=caption,
        reply_markup=get_inlines_menu()
    )
    await callback_query.answer()

from aiogram.fsm.state import State, StatesGroup
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    page = State()

class ImageForm(StatesGroup):
    page = State()

# –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–∞–∑–¥–µ–ª "–¢–µ–∫—Å—Ç")
text_photos = [f'https://via.placeholder.com/400x200.png?text=Text+Page+{i}' for i in range(1, 11)]

# –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–∞–∑–¥–µ–ª "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
image_photos = [f'https://via.placeholder.com/400x200.png?text=Image+Page+{i}' for i in range(1, 11)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def create_custom_menu(page: int = 1, total_pages: int = 10, selected: bool = False):
    status_text = "‚úÖ" if selected else "‚ùå"
    custom_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='previous'),
         InlineKeyboardButton(text=f"{status_text} {page}/{total_pages}", callback_data='page_status'),
         InlineKeyboardButton(text='‚û°Ô∏è', callback_data='next')],
        [InlineKeyboardButton(text='üìÑ –ò–Ω—Ñ–æ', callback_data=f'info_{page}'),
         InlineKeyboardButton(text='üíé –¶–µ–Ω—ã', callback_data=f'prices_{page}')],
        [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å', callback_data='select')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data='bek1')]
    ])
    return custom_keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ text_switcher
@person_router.callback_query(F.data == "museums")
async def text_switcher_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.page)
    await state.update_data(selected=False, page=1)

    await callback.message.answer_photo(
        photo=text_photos[0],
        caption="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_custom_menu(page=1)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ images_switcher
@person_router.callback_query(F.data == "images_switcher")
async def images_switcher_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ImageForm.page)
    await state.update_data(selected=False, page=1)

    await callback.message.answer_photo(
        photo=image_photos[0],
        caption="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=create_custom_menu(page=1)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ text_switcher
@person_router.callback_query(Form.page, F.data.in_({"next", "previous"}))
async def text_navigation_handler(callback: types.CallbackQuery, state: FSMContext):
    await navigate_pages(callback, state, text_photos)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ images_switcher
@person_router.callback_query(ImageForm.page, F.data.in_({"next", "previous"}))
async def image_navigation_handler(callback: types.CallbackQuery, state: FSMContext):
    await navigate_pages(callback, state, image_photos)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
async def navigate_pages(callback, state, photos):
    data = await state.get_data()
    current_page = data.get("page", 1)
    total_pages = 10

    if callback.data == "next":
        next_page = current_page + 1 if current_page < total_pages else 1
    else:  # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ previous
        next_page = current_page - 1 if current_page > 1 else total_pages

    await state.update_data(page=next_page, selected=False)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=photos[next_page - 1], caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {next_page}: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=create_custom_menu(page=next_page, total_pages=total_pages)
    )
    await callback.answer(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {next_page}")




@person_router.callback_query(F.data == "bek1")
async def back_to_menu(callback_query: CallbackQuery):
    await callback_query.message.delete(caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=None)
    caption = "–ú—É–∑–µ–∏ üñºÔ∏è \n\
    –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –º—É–∑–µ–µ–≤ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É! –£–∑–Ω–∞–π—Ç–µ –æ —Ç–µ–∫—É—â–∏—Ö –≤—ã—Å—Ç–∞–≤–∫–∞—Ö, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–æ–≤–∏—â–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–æ–ª–Ω—è—é—Ç –Ω–∞—à –≥–æ—Ä–æ–¥ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. üèõÔ∏è‚ú®\n\
              –ü–∞–º—è—Ç–Ω–∏–∫–∏ üóø\n \
   –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –†–æ—Å—Ç–æ–≤–∞-–Ω–∞-–î–æ–Ω—É! –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –∑–Ω–∞–∫–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö –≥–æ—Ä–æ–¥–∞ –∏ –∏—Ö —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –†–æ—Å—Ç–æ–≤ –æ—Å–æ–±–µ–Ω–Ω—ã–º. üìù‚≠ê "
    await callback_query.message.edit_caption(
        caption=caption,
        reply_markup=get_inlines_menu()
    )
    await callback_query.answer()




# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    page = State()

class ImageForm(StatesGroup):
    page = State()

# –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–∞–∑–¥–µ–ª "–¢–µ–∫—Å—Ç")
text_photos = [f'https://via.placeholder.com/400x200.png?text=Text+Page+{i}' for i in range(1, 11)]

# –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–∞–∑–¥–µ–ª "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
image_photos = [f'https://via.placeholder.com/400x200.png?text=Image+Page+{i}' for i in range(1, 11)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def create_custom_menu(page: int = 1, total_pages: int = 10, selected: bool = False):
    status_text = "‚úÖ" if selected else "‚ùå"
    custom_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='previous'),
         InlineKeyboardButton(text=f"{status_text} {page}/{total_pages}", callback_data='page_status'),
         InlineKeyboardButton(text='‚û°Ô∏è', callback_data='next')],
        [InlineKeyboardButton(text='üìÑ –ò–Ω—Ñ–æ', callback_data=f'info_{page}'),
         InlineKeyboardButton(text='üíé –¶–µ–Ω—ã', callback_data=f'prices_{page}')],
        [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å', callback_data='select')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data='bek1')]
    ])
    return custom_keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ text_switcher
@person_router.callback_query(F.data == "monuments")
async def text_switcher_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.page)
    await state.update_data(selected=False, page=1)

    await callback.message.answer_photo(
        photo=text_photos[0],
        caption="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_custom_menu(page=1)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ images_switcher
@person_router.callback_query(F.data == "images_switcher")
async def images_switcher_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ImageForm.page)
    await state.update_data(selected=False, page=1)

    await callback.message.answer_photo(
        photo=image_photos[0],
        caption="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=create_custom_menu(page=1)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ text_switcher
@person_router.callback_query(Form.page, F.data.in_({"next", "previous"}))
async def text_navigation_handler(callback: types.CallbackQuery, state: FSMContext):
    await navigate_pages(callback, state, text_photos)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ images_switcher
@person_router.callback_query(ImageForm.page, F.data.in_({"next", "previous"}))
async def image_navigation_handler(callback: types.CallbackQuery, state: FSMContext):
    await navigate_pages(callback, state, image_photos)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
async def navigate_pages(callback, state, photos):
    data = await state.get_data()
    current_page = data.get("page", 1)
    total_pages = 10

    if callback.data == "next":
        next_page = current_page + 1 if current_page < total_pages else 1
    else:  # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ previous
        next_page = current_page - 1 if current_page > 1 else total_pages

    await state.update_data(page=next_page, selected=False)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=photos[next_page - 1], caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {next_page}: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=create_custom_menu(page=next_page, total_pages=total_pages)
    )
    await callback.answer(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {next_page}")



class SupportState(StatesGroup):
    waiting_for_message = State()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
SUPPORT_CHAT_IDS = [7227863362]  # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ ID –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏


@person_router.callback_query(F.data == "baksii")
async def back_to_config(callback_query: CallbackQuery):
    caption = (
    "–ö—É–ª—å—Ç—É—Ä–∞ üñºÔ∏è: –£–∑–Ω–∞–π—Ç–µ –æ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –≤—ã—Å—Ç–∞–≤–∫–∞—Ö –≤ –†–æ—Å—Ç–æ–≤–µ-–Ω–∞-–î–æ–Ω—É.\n\n"
    "–ï–¥–∞ üç∞: –û—Ç–∫—Ä–æ–π—Ç–µ –ª—É—á—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ –≥–æ—Ä–æ–¥–∞.\n\n"
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üéâ: –ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –¥–æ—Å—É–≥–∞.")
    await callback_query.message.edit_caption(caption=caption,reply_markup=get_inline_menu())


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@person_router.message(F.text == "üõ†Ô∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message, state: FSMContext):
    await state.set_state(SupportState.waiting_for_message)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@person_router.message(SupportState.waiting_for_message, F.text)
async def process_support_message(message: Message, state: FSMContext, bot: Bot):
    await message.delete()
    user_id = message.from_user.id
    username, district, gender, age = get_user_data(user_id)
    support_text = message.text
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_message = (
        f"üõ†Ô∏è *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        f"*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {username}\n"
        f"*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {user_id}\n"
        f"*–†–∞–π–æ–Ω:* {district}\n"
        f"*–ü–æ–ª:* {gender}\n"
        f"*–í–æ–∑—Ä–∞—Å—Ç:* {age}\n\n"
        f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {support_text}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in SUPPORT_CHAT_IDS:
        await bot.send_message(admin_id, admin_message, parse_mode='Markdown')
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",reply_markup= get_inliness_menu())
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@person_router.callback_query(F.data == "munesd")
async def main_menu_handler(callback_query: CallbackQuery, bot: Bot):
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback_query.message.delete()
        logger.info("–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_menu_photo_path = "images/pup.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å

    photo = FSInputFile(main_menu_photo_path)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    try:
        await bot.send_photo(
            chat_id=callback_query.from_user.id,
            photo=photo,
            caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.", show_alert=True)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
    await callback_query.answer()